class Node:
    def __init__(self,data):
        self.data=data
        self.ref=None

class LinkedList:
    def __init__(self):
        self.head=None
        
    def print_LL(self):
        if self.head==None:
            print("linked list empty")
        else:
            n=self.head
            while n!=None:
                print(n.data , "---->",end=" ")
                n=n.ref
    def add_begin(self,data):
        new_node=Node(data)
        new_node.ref=self.head
        self.head=new_node
    def add_end(self,data):
        new_node=Node(data)
        if self.head==None:
            self.head=new_node
        else:
            n=self.head
            while n.ref!=None:
                n=n.ref
            n.ref=new_node
    def add_after(self,data,x):
        n=self.head
        while n!=None:
            if x==n.data:
                break
            n=n.ref
        if n==None:
            print("node is not present here")
        else:
            new_node=Node(data)
            new_node.ref=n.ref
            n.ref=new_node
    def add_before(self,data,x):
        if self.head==None:
            print("linked list is empty")
            return
        if self.head.data==x:
            new_node=Node(data)
            new_node.ref=n.ref
            n.ref=new_node
            return
        n=self.head
        while n.ref!=none:
            if n.ref.data==x:
                return
            n=n.ref
        if n.ref==None:
            print("linked list is empty ")
        else:
            new_node=Node(data)
            new_node.ref=n.ref
            n.ref=new_node
    def delete_begin(self):
        if self.head==None:
            print("linked list is empty")
        else:
            self.head=self.head.ref
    def delete_end(self):
        if self.head==None:
            print("linked list is empty we cant delete nodes")
        elif self.head.ref==None:
            self.head=None
        else:
            n=self.head
            while n.ref.ref!=None:
                n=n.ref
            n.ref=None
    def delte_by_value(self,x):
        if self.head==None:
            print("linked list is empty")
            return
        if x==self.head.data:
            self.head.data=n.self.data.ref
            return
        n=self.head
        if n.ref!=None:
            if x==n.ref.data:
                return
            n=n.ref
        if n.ref==None:
            print("node is not present")
        else:
            n.ref=n.ref.ref

LL1=LinkedList()
LL1.print_LL(10)
